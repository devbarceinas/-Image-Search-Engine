{"version":3,"sources":["components/Buscador.js","components/Imagen.js","components/Paginacion.js","components/Resultado.js","App.js","serviceWorker.js","index.js"],"names":["Buscador","busquedaRef","React","createRef","obtenerDatos","event","preventDefault","termino","_this","current","value","props","datosBusqueda","react_default","a","createElement","onSubmit","this","className","ref","type","placeholder","Component","Imagen","_props$imagen","imagen","previewURL","tags","likes","views","largeImageURL","src","alt","href","rel","Paginacion","onClick","paginaAnterior","paginaSiguiente","Resultado","mostrarImagenes","imagenes","length","Fragment","map","components_Imagen","key","id","components_Paginacion","App","state","pagina","scroll","document","querySelector","scrollIntoView","setState","consumirApi","url","concat","fetch","then","respuesta","json","resultado","hits","components_Buscador","components_Resultado","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAmCeA,6MA/BdC,YAAcC,IAAMC,cAEpBC,aAAe,SAACC,GACfA,EAAMC,iBAEN,IAAMC,EAAUC,EAAKP,YAAYQ,QAAQC,MAEzCF,EAAKG,MAAMC,cAAcL,4EAIzB,OACCM,EAAAC,EAAAC,cAAA,QAAMC,SAAUC,KAAKb,cACpBS,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACdL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,uBACdL,EAAAC,EAAAC,cAAA,SAAOI,IAAKF,KAAKhB,YAChBmB,KAAK,OACLF,UAAU,+BACVG,YAAY,0CAEdR,EAAAC,EAAAC,cAAA,OAAKG,UAAU,uBACdL,EAAAC,EAAAC,cAAA,SAAOK,KAAK,SACXF,UAAU,2CACVR,MAAM,wBAzBUY,aC0BRC,EA1BA,SAACZ,GAAU,IAAAa,EAQpBb,EAAMc,OALRC,EAHsBF,EAGtBE,WACAC,EAJsBH,EAItBG,KACAC,EALsBJ,EAKtBI,MACAC,EANsBL,EAMtBK,MACAC,EAPsBN,EAOtBM,cAGF,OACEjB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,0CACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACbL,EAAAC,EAAAC,cAAA,OAAKgB,IAAKL,EAAYM,IAAKL,EAAMT,UAAU,iBAC3CL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,aAAaU,EAA1B,aACAf,EAAAC,EAAAC,cAAA,KAAGG,UAAU,aAAaW,EAA1B,WACAhB,EAAAC,EAAAC,cAAA,KAAGkB,KAAMH,EAAeI,IAAI,WAAWhB,UAAU,oCAAjD,kBCAKiB,EAjBI,SAAAxB,GACjB,OACEE,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACbL,EAAAC,EAAAC,cAAA,UAAQK,KAAK,SACXgB,QAASzB,EAAM0B,eACfnB,UAAU,6BAFZ,mBAKAL,EAAAC,EAAAC,cAAA,UAAQK,KAAK,SACXgB,QAASzB,EAAM2B,gBACfpB,UAAU,wBAFZ,sBC0BSqB,6MA9BbC,gBAAkB,WAChB,IAAMC,EAAWjC,EAAKG,MAAMc,OAC5B,OAAwB,IAApBgB,EAASC,OAAqB,KAEhC7B,EAAAC,EAAAC,cAACF,EAAAC,EAAM6B,SAAP,KACE9B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACZuB,EAASG,IAAI,SAAAnB,GAAM,OAClBZ,EAAAC,EAAAC,cAAC8B,EAAD,CACEC,IAAKrB,EAAOsB,GACZtB,OAAQA,OAIdZ,EAAAC,EAAAC,cAACiC,EAAD,CACEX,eAAgB7B,EAAKG,MAAM0B,eAC3BC,gBAAiB9B,EAAKG,MAAM2B,4FAOlC,OACEzB,EAAAC,EAAAC,cAACF,EAAAC,EAAM6B,SAAP,KACG1B,KAAKuB,0BA1BUlB,aCyFT2B,oNArFbC,MAAQ,CACN3C,QAAS,GACTkC,SAAU,GACVU,OAAQ,MAGVC,OAAS,WACUC,SAASC,cAAc,cAC/BC,eAAe,SAAU,YAGpClB,eAAiB,WAEb,IAAIc,EAAS3C,EAAK0C,MAAMC,OAExB,GAAe,IAAXA,EAAc,OAAO,KAEzBA,GAAU,EAEV3C,EAAKgD,SAAS,CACZL,UACC,WACD3C,EAAKiD,cACLjD,EAAK4C,cAIXd,gBAAkB,WAEhB,IAAIa,EAAS3C,EAAK0C,MAAMC,OAExBA,GAAU,EAEV3C,EAAKgD,SAAS,CACZL,UACC,WACD3C,EAAKiD,cACLjD,EAAK4C,cAITK,YAAc,WACZ,IAAMlD,EAAUC,EAAK0C,MAAM3C,QACrB4C,EAAS3C,EAAK0C,MAAMC,OACpBO,EAAG,qEAAAC,OAAwEpD,EAAxE,sBAAAoD,OAAoGR,GAC7GS,MAAMF,GACHG,KAAK,SAAAC,GAAS,OAAIA,EAAUC,SAC5BF,KAAK,SAAAG,GAAS,OAAIxD,EAAKgD,SAAS,CAC/Bf,SAAUuB,EAAUC,YAI1BrD,cAAgB,SAACL,GACfC,EAAKgD,SAAS,CACZjD,UACA4C,OAAQ,GACP,WACD3C,EAAKiD,yFAKP,OACE5C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,sBAAd,wBACAL,EAAAC,EAAAC,cAACmD,EAAD,CACEtD,cAAeK,KAAKL,iBAGxBC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,8BACbL,EAAAC,EAAAC,cAAA,UAAKE,KAAKiC,MAAMC,SAElBtC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,8BACbL,EAAAC,EAAAC,cAACoD,EAAD,CACE1C,OAAQR,KAAKiC,MAAMT,SACnBJ,eAAgBpB,KAAKoB,eACrBC,gBAAiBrB,KAAKqB,2BA/EhBhB,cCME8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAAStB,SAASuB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC","file":"static/js/main.fe6152af.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Buscador extends Component {\n\n\tbusquedaRef = React.createRef();\n\n\tobtenerDatos = (event) => {\n\t\tevent.preventDefault();\n\t\t// Tomamos el valor del input\n\t\tconst termino = this.busquedaRef.current.value;\n\t\t// Lo enviamos al componente principal\n\t\tthis.props.datosBusqueda(termino);\n\t}\n\n\trender() {\n\t\treturn ( \n\t\t\t<form onSubmit={this.obtenerDatos}>\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"form-group col-md-8\">\n\t\t\t\t\t\t<input ref={this.busquedaRef} \n\t\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\t\tclassName=\"form-control form-control-lg\" \n\t\t\t\t\t\t\tplaceholder=\"Busca tu imagen, Ejemplo: Bicicletas\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"form-group col-md-4\">\n\t\t\t\t\t\t<input type=\"submit\"\n\t\t\t\t\t\t\tclassName=\"btn btn-lg btn-outline-warning btn-block\"\n\t\t\t\t\t\t\tvalue=\"Buscar...\" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nexport default Buscador;","import React from 'react';\n\nconst Imagen = (props) => {\n\n  const {\n    previewURL,\n    tags,\n    likes,\n    views,\n    largeImageURL\n  } = props.imagen;\n\n  return (\n    <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\n      <div className=\"card\">\n        <img src={previewURL} alt={tags} className=\"card-img-top\" />\n        <div className=\"card-body\">\n          <p className=\"card-text\">{likes} Me gusta</p>\n          <p className=\"card-text\">{views} Vistas</p>\n          <a href={largeImageURL} rel=\"noopener\" className=\"btn btn-outline-danger btn-block\">\n            Ver Imagen\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Imagen;","import React from 'react';\n\nconst Paginacion = props => {\n  return (\n    <div className=\"py-3\">\n      <button type=\"button\"\n        onClick={props.paginaAnterior}\n        className=\"btn btn-outline-info mr-1\">\n          &larr; Anterior\n      </button>\n      <button type=\"button\"\n        onClick={props.paginaSiguiente}\n        className=\"btn btn-outline-info\">\n          Siguiente &rarr;\n      </button>\n    </div>\n  );\n}\n\nexport default Paginacion;","import React, { Component } from 'react';\nimport Imagen from './Imagen';\nimport Paginacion from './Paginacion';\n\nclass Resultado extends Component {\n\n  mostrarImagenes = () => {\n    const imagenes = this.props.imagen;\n    if (imagenes.length === 0) return null;\n    return (\n      <React.Fragment>\n        <div className=\"col-12 p-5 row\">\n          {imagenes.map(imagen => (\n            <Imagen \n              key={imagen.id}\n              imagen={imagen}\n            />\n          ))}\n        </div>\n        <Paginacion \n          paginaAnterior={this.props.paginaAnterior}\n          paginaSiguiente={this.props.paginaSiguiente}\n        />\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.mostrarImagenes()}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Resultado;","import React, { Component } from 'react';\nimport Buscador from './components/Buscador';\nimport Resultado from './components/Resultado';\n\nimport './App.css'\n\nclass App extends Component {\n\n  state = {\n    termino: '',\n    imagenes: [],\n    pagina: ''\n  }\n\n  scroll = () => {\n    const elemento = document.querySelector('.jumbotron');\n    elemento.scrollIntoView('smooth', 'start');\n  }\n\n  paginaAnterior = () => {\n      // leer el state de la pagina actual\n      let pagina = this.state.pagina;\n      // si la pÃ¡gina es uno ya no ir a tras\n      if (pagina === 1) return null;\n      // resta uno a la pagina actual\n      pagina -= 1;\n      // agregar el cambio al state\n      this.setState({\n        pagina\n      }, () => {\n        this.consumirApi();\n        this.scroll();\n      });\n  }\n\n  paginaSiguiente = () => {\n    // leer el state de la pagina actual\n    let pagina = this.state.pagina;\n    // suma uno a la pagina actual\n    pagina += 1;\n    // agregar el cambio al state\n    this.setState({\n      pagina\n    }, () => {\n      this.consumirApi();\n      this.scroll();\n    });\n  }\n\n  consumirApi = () => {\n    const termino = this.state.termino;\n    const pagina = this.state.pagina;\n    const url = `https://pixabay.com/api/?key=12815403-69455376b6eb621d18e3470c2&q=${termino}&per_page=30&page=${pagina}`;\n    fetch(url)\n      .then(respuesta => respuesta.json())\n      .then(resultado => this.setState({\n        imagenes: resultado.hits\n      }))\n  }\n\n  datosBusqueda = (termino) => {\n    this.setState({\n      termino,\n      pagina: 1\n    }, () => {\n      this.consumirApi();\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"app container\">\n        <div className=\"jumbotron\">\n          <h1 className=\"text-center rouder\">Buscador de imagenes</h1>\n          <Buscador \n            datosBusqueda={this.datosBusqueda} \n          />\n        </div>\n        <div className=\"row justify-content-center\">\n          <h2>{this.state.pagina}</h2>\n        </div>\n        <div className=\"row justify-content-center\">\n          <Resultado\n            imagen={this.state.imagenes}\n            paginaAnterior={this.paginaAnterior}\n            paginaSiguiente={this.paginaSiguiente}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}